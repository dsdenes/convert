/*
 * Converted from api.yaml with typeconv
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiSitesSiteIDSmsConversationsGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	siteID string
}


func (r ApiSitesSiteIDSmsConversationsGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteIDSmsConversationsGetExecute(r)
}

/*
 * SitesSiteIDSmsConversationsGet List of SMS conversations
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteID Site id
 * @return ApiSitesSiteIDSmsConversationsGetRequest
 */
func (a *DefaultApiService) SitesSiteIDSmsConversationsGet(ctx _context.Context, siteID string) ApiSitesSiteIDSmsConversationsGetRequest {
	return ApiSitesSiteIDSmsConversationsGetRequest{
		ApiService: a,
		ctx: ctx,
		siteID: siteID,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) SitesSiteIDSmsConversationsGetExecute(r ApiSitesSiteIDSmsConversationsGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SitesSiteIDSmsConversationsGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{siteID}/sms-conversations"
	localVarPath = strings.Replace(localVarPath, "{"+"siteID"+"}", _neturl.PathEscape(parameterToString(r.siteID, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteIDSmsConversationsPhoneNumberGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	siteID string
	phoneNumber string
}


func (r ApiSitesSiteIDSmsConversationsPhoneNumberGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteIDSmsConversationsPhoneNumberGetExecute(r)
}

/*
 * SitesSiteIDSmsConversationsPhoneNumberGet List of SMS conversation messages to a given phone number
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteID Site id
 * @param phoneNumber Phone number
 * @return ApiSitesSiteIDSmsConversationsPhoneNumberGetRequest
 */
func (a *DefaultApiService) SitesSiteIDSmsConversationsPhoneNumberGet(ctx _context.Context, siteID string, phoneNumber string) ApiSitesSiteIDSmsConversationsPhoneNumberGetRequest {
	return ApiSitesSiteIDSmsConversationsPhoneNumberGetRequest{
		ApiService: a,
		ctx: ctx,
		siteID: siteID,
		phoneNumber: phoneNumber,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) SitesSiteIDSmsConversationsPhoneNumberGetExecute(r ApiSitesSiteIDSmsConversationsPhoneNumberGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SitesSiteIDSmsConversationsPhoneNumberGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{siteID}/sms-conversations/{phoneNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"siteID"+"}", _neturl.PathEscape(parameterToString(r.siteID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phoneNumber"+"}", _neturl.PathEscape(parameterToString(r.phoneNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSitesSiteIDSmsConversationsPhoneNumberMessagePostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	siteID string
	phoneNumber string
	sendMessageToConversationRequest *SendMessageToConversationRequest
}

func (r ApiSitesSiteIDSmsConversationsPhoneNumberMessagePostRequest) SendMessageToConversationRequest(sendMessageToConversationRequest SendMessageToConversationRequest) ApiSitesSiteIDSmsConversationsPhoneNumberMessagePostRequest {
	r.sendMessageToConversationRequest = &sendMessageToConversationRequest
	return r
}

func (r ApiSitesSiteIDSmsConversationsPhoneNumberMessagePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SitesSiteIDSmsConversationsPhoneNumberMessagePostExecute(r)
}

/*
 * SitesSiteIDSmsConversationsPhoneNumberMessagePost Send test message to a given conversation
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param siteID Site id
 * @param phoneNumber Phone number
 * @return ApiSitesSiteIDSmsConversationsPhoneNumberMessagePostRequest
 */
func (a *DefaultApiService) SitesSiteIDSmsConversationsPhoneNumberMessagePost(ctx _context.Context, siteID string, phoneNumber string) ApiSitesSiteIDSmsConversationsPhoneNumberMessagePostRequest {
	return ApiSitesSiteIDSmsConversationsPhoneNumberMessagePostRequest{
		ApiService: a,
		ctx: ctx,
		siteID: siteID,
		phoneNumber: phoneNumber,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) SitesSiteIDSmsConversationsPhoneNumberMessagePostExecute(r ApiSitesSiteIDSmsConversationsPhoneNumberMessagePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SitesSiteIDSmsConversationsPhoneNumberMessagePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sites/{siteID}/sms-conversations/{phoneNumber}/message"
	localVarPath = strings.Replace(localVarPath, "{"+"siteID"+"}", _neturl.PathEscape(parameterToString(r.siteID, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"phoneNumber"+"}", _neturl.PathEscape(parameterToString(r.phoneNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.sendMessageToConversationRequest == nil {
		return nil, reportError("sendMessageToConversationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sendMessageToConversationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSmsConversationPhoneNumberGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	phoneNumber string
}


func (r ApiSmsConversationPhoneNumberGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SmsConversationPhoneNumberGetExecute(r)
}

/*
 * SmsConversationPhoneNumberGet List of SMS conversation messages to a given phone number
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param phoneNumber Phone number
 * @return ApiSmsConversationPhoneNumberGetRequest
 */
func (a *DefaultApiService) SmsConversationPhoneNumberGet(ctx _context.Context, phoneNumber string) ApiSmsConversationPhoneNumberGetRequest {
	return ApiSmsConversationPhoneNumberGetRequest{
		ApiService: a,
		ctx: ctx,
		phoneNumber: phoneNumber,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) SmsConversationPhoneNumberGetExecute(r ApiSmsConversationPhoneNumberGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SmsConversationPhoneNumberGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sms-conversation/{phoneNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"phoneNumber"+"}", _neturl.PathEscape(parameterToString(r.phoneNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSmsConversationsGetRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
}


func (r ApiSmsConversationsGetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SmsConversationsGetExecute(r)
}

/*
 * SmsConversationsGet List of SMS conversations
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSmsConversationsGetRequest
 */
func (a *DefaultApiService) SmsConversationsGet(ctx _context.Context) ApiSmsConversationsGetRequest {
	return ApiSmsConversationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) SmsConversationsGetExecute(r ApiSmsConversationsGetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SmsConversationsGet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sms-conversations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSmsConversationsPhoneNumberMessagePostRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	phoneNumber string
	sendMessageToConversationRequest *SendMessageToConversationRequest
}

func (r ApiSmsConversationsPhoneNumberMessagePostRequest) SendMessageToConversationRequest(sendMessageToConversationRequest SendMessageToConversationRequest) ApiSmsConversationsPhoneNumberMessagePostRequest {
	r.sendMessageToConversationRequest = &sendMessageToConversationRequest
	return r
}

func (r ApiSmsConversationsPhoneNumberMessagePostRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SmsConversationsPhoneNumberMessagePostExecute(r)
}

/*
 * SmsConversationsPhoneNumberMessagePost Send test message to a given conversation
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param phoneNumber Phone number
 * @return ApiSmsConversationsPhoneNumberMessagePostRequest
 */
func (a *DefaultApiService) SmsConversationsPhoneNumberMessagePost(ctx _context.Context, phoneNumber string) ApiSmsConversationsPhoneNumberMessagePostRequest {
	return ApiSmsConversationsPhoneNumberMessagePostRequest{
		ApiService: a,
		ctx: ctx,
		phoneNumber: phoneNumber,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) SmsConversationsPhoneNumberMessagePostExecute(r ApiSmsConversationsPhoneNumberMessagePostRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.SmsConversationsPhoneNumberMessagePost")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sms-conversations/{phoneNumber}/message"
	localVarPath = strings.Replace(localVarPath, "{"+"phoneNumber"+"}", _neturl.PathEscape(parameterToString(r.phoneNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.sendMessageToConversationRequest == nil {
		return nil, reportError("sendMessageToConversationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sendMessageToConversationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
