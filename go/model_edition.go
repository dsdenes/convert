/*
 * Converted from api.yaml with typeconv
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Edition struct for Edition
type Edition struct {
	Name string `json:"name"`
	Date Date `json:"date"`
}

// NewEdition instantiates a new Edition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEdition(name string, date Date) *Edition {
	this := Edition{}
	this.Name = name
	this.Date = date
	return &this
}

// NewEditionWithDefaults instantiates a new Edition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditionWithDefaults() *Edition {
	this := Edition{}
	return &this
}

// GetName returns the Name field value
func (o *Edition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Edition) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Edition) SetName(v string) {
	o.Name = v
}

// GetDate returns the Date field value
func (o *Edition) GetDate() Date {
	if o == nil {
		var ret Date
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Edition) GetDateOk() (*Date, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Edition) SetDate(v Date) {
	o.Date = v
}

func (o Edition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableEdition struct {
	value *Edition
	isSet bool
}

func (v NullableEdition) Get() *Edition {
	return v.value
}

func (v *NullableEdition) Set(val *Edition) {
	v.value = val
	v.isSet = true
}

func (v NullableEdition) IsSet() bool {
	return v.isSet
}

func (v *NullableEdition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEdition(val *Edition) *NullableEdition {
	return &NullableEdition{value: val, isSet: true}
}

func (v NullableEdition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEdition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


